<x-filament-panels::page.simple>
    <style>
        .docs-section h2 {
            font-size: 1.75rem;
            font-weight: 600;
            padding-bottom: 0.5rem;
            border-bottom: 1px solid var(--gray-200, #e5e7eb);
            margin-bottom: 1rem;
        }
        .docs-section h3 {
            font-size: 1.25rem;
            font-weight: 600;
            margin-top: 1.5rem;
            margin-bottom: 0.75rem;
        }
        .docs-section p, .docs-section ul {
            color: var(--gray-600, #4b5563);
            line-height: 1.6;
        }
        .docs-section ul {
            list-style-type: disc;
            padding-left: 1.5rem;
        }
        .docs-section li {
            margin-bottom: 0.5rem;
        }
        .docs-section code {
            background-color: var(--gray-100, #f3f4f6);
            padding: 0.2rem 0.4rem;
            border-radius: 4px;
            font-size: 0.9em;
        }
        .docs-section .grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 1.5rem;
            margin-top: 1.5rem;
        }
        .quick-link-card {
            background-color: var(--white, #fff);
            border-radius: 8px;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            transition: all 0.2s ease-in-out;
            border: 1px solid var(--gray-200, #e5e7eb);
        }
        .quick-link-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }
        .dark .docs-section p, .dark .docs-section ul { color: var(--gray-400, #9ca3af); }
        .dark .docs-section code { background-color: var(--gray-800, #1f2937); }
        .dark .quick-link-card { background-color: var(--gray-800, #1f2937); border-color: var(--gray-700, #374151); }
    </style>

    <div class="space-y-8 docs-section">
        <section>
            <h2>Project Overview</h2>
            <p>
                This is a Laravel-based backend for a multi-tenant WhatsApp messaging service. Its goal is to provide a scalable platform for various business types ('Service Types') to deploy and manage custom interactive WhatsApp 'Flows' for their clients ('Providers').
            </p>
        </section>

        <section>
            <h2>Key Concepts</h2>
            <ul>
                <li><strong>Service Type:</strong> The top-level business category (e.g., 'Food Delivery', 'Clinic Appointments'). This entity defines the master templates for flows, messages, and custom data fields.</li>
                <li><strong>Provider:</strong> The end-customer or business using the platform (e.g., 'Slice Pizza', 'City Clinic'). A Provider belongs to one Service Type.</li>
                <li><strong>Flow:</strong> A Provider's unique, editable instance of a conversation. It is generated by copying a Base Flow Template when the provider is onboarded.</li>
                <li><strong>Base Flow Template:</strong> The master, un-editable flow definition (as JSON) that lives on the Service Type. It acts as the starting point for all providers of that type.</li>
                <li><strong>Custom Attributes:</strong> Dynamic data fields defined by a Service Type (e.g., a 'patient_id' for clinics) that can be used in their flows.</li>
            </ul>
        </section>

        <section>
            <h2>Main Workflow</h2>
            <ol style="list-style-type: decimal; padding-left: 1.5rem;">
                <li><strong>Admin Onboarding:</strong> An admin creates a <code>Service Type</code> and configures its <code>Base Flow Template</code>, <code>Custom Attributes</code>, and all necessary translated system messages.</li>
                <li><strong>Provider Onboarding:</strong> An admin creates a <code>Provider</code> and assigns it to a <code>Service Type</code>. The system automatically copies the <code>Base Flow Template</code> to create a new, editable <code>Flow</code> record linked to this Provider.</li>
                <li><strong>Message Handling:</strong> A WhatsApp message arrives at the webhook. The system identifies the Provider, loads their specific Flow and their Service Type's configuration.</li>
                <li><strong>System Messages:</strong> When a system message (like a welcome or update) is needed, the system uses the appropriate translated message template from the Provider's Service Type.</li>
            </ol>
        </section>

        <section>
            <h2>Quick Links</h2>
            <div class="grid">
                <a href="{{ \App\Filament\Resources\ServiceTypeResource::getUrl() }}" class="quick-link-card">
                    <h3>Manage Service Types</h3>
                    <p>Define the core business categories for the platform.</p>
                </a>
                <a href="{{ \App\Filament\Resources\ProviderResource::getUrl() }}" class="quick-link-card">
                    <h3>Manage Providers</h3>
                    <p>Onboard and configure the businesses using the service.</p>
                </a>
                <a href="{{ \App\Filament\Resources\FlowResource::getUrl() }}" class="quick-link-card">
                    <h3>Build Flows</h3>
                    <p>Create and edit the conversational flows for providers.</p>
                </a>
            </div>
        </section>
    </div>
</x-filament-panels::page.simple>
